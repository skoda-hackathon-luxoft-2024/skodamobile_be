name: Build and Push Docker Image

on:
  push:
    branches:
      - feature-add-cicd
  pull_request:
    branches:
      - feature-add-cicd

env:
  ACR_IMAGE_NAME: app

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: "6.x"

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v3.0.0
        id: gitversion
        with:
          useConfigFile: true

      - name: Set Version Output
        id: version
        run: echo "VERSION=${{ steps.gitversion.outputs.majorminorpatch }}" >> $GITHUB_OUTPUT

  build:
    name: Build Docker Image
    needs: [version]
    runs-on: ubuntu-latest
    environment: "DEVELOPMENT"
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build and Tag Docker Image
        run: |
          docker build \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --build-arg VCS_REF=$(git rev-parse --short HEAD) \
          --build-arg VERSION=${{ env.VERSION }} \
          -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }} .
          docker tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:latest

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:latest

  deploy-development:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: [version, build]
    environment: "DEVELOPMENT"
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Define Variables
        run: echo "VERSION=${{ env.VERSION }}"
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOCKER_COMPOSE_PATH: /home/${{ secrets.SERVER_USER }}/docker-compose.yml
          IMAGE: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
          REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}

      - name: Add SSH Key
        run: |
          eval $(ssh-agent -s)
          echo "${{ env.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: SSH into Server and Update Docker-Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} << 'EOF'
            sed -i "s|image: ${{ env.IMAGE }}:.*|image: ${{ env.IMAGE }}:${{ env.VERSION }}|" ${{ env.DOCKER_COMPOSE_PATH }}
            cd $(dirname ${{ env.DOCKER_COMPOSE_PATH }})
            echo ${{ env.REGISTRY_TOKEN }} | docker login ${{ env.REGISTRY_LOGIN_SERVER }} -u ${{ env.REGISTRY_USERNAME }} --password-stdin
            docker-compose pull
            docker-compose up -d
          EOF
        env:
          VERSION: ${{ env.VERSION }}
          IMAGE: ${{ env.IMAGE }}
          DOCKER_COMPOSE_PATH: ${{ env.DOCKER_COMPOSE_PATH }}
          REGISTRY_USERNAME: ${{ env.REGISTRY_USERNAME }}
          REGISTRY_TOKEN: ${{ env.REGISTRY_TOKEN }}
          REGISTRY_LOGIN_SERVER: ${{ env.REGISTRY_LOGIN_SERVER }}
          SERVER_USER: ${{ env.SERVER_USER }}
          SERVER_IP: ${{ env.SERVER_IP }}
          SSH_PRIVATE_KEY: ${{ env.SSH_PRIVATE_KEY }}
