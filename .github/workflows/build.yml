name: Build and Push Docker Image

on:
  push:
    branches:
      - feature-add-cicd
  pull_request:
    branches:
      - feature-add-cicd

env:
  ACR_IMAGE_NAME: app

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: "6.x"

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v3.0.0
        id: gitversion
        with:
          useConfigFile: true

      - name: Set Version Output
        id: version
        run: echo "VERSION=${{ steps.gitversion.outputs.majorminorpatch }}" >> $GITHUB_OUTPUT

  build:
    name: Build Docker Image
    needs: [version]
    runs-on: ubuntu-latest
    environment: "DEVELOPMENT"
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build and Tag Docker Image
        run: |
          docker build \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --build-arg VCS_REF=$(git rev-parse --short HEAD) \
          --build-arg VERSION=${{ env.VERSION }} \
          -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }} .
          docker tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:latest

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:latest

  deploy_development:
    name: Deploy to Development Server
    runs-on: ubuntu-latest
    needs: [version, build]
    environment: "DEVELOPMENT"
    env:
      VERSION: ${{ needs.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Add SSH Key
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add - > /dev/null

      - name: SSH into Server and Update Docker-Compose
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sed -i "s|image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:.*|image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }}|" /home/${{ secrets.SERVER_USER }}/docker-compose.yml
            cd /home/${{ secrets.SERVER_USER }}
            echo ${{ secrets.REGISTRY_TOKEN }} | docker login ${{ secrets.REGISTRY_LOGIN_SERVER }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
            docker-compose pull
            docker-compose up -d
          EOF

  deploy_stage:
    name: Deploy to Stage Server
    runs-on: ubuntu-latest
    needs: [version, build, deploy_development]
    if: github.event_name == 'workflow_dispatch'
    environment: "stage"
    env:
      VERSION: ${{ needs.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Add SSH Key
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add - > /dev/null

      - name: SSH into Server and Update Docker-Compose
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sed -i "s|image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:.*|image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_IMAGE_NAME }}:${{ env.VERSION }}|" /home/${{ secrets.SERVER_USER }}/docker-compose.yml
            cd /home/${{ secrets.SERVER_USER }}
            echo ${{ secrets.REGISTRY_TOKEN }} | docker login ${{ secrets.REGISTRY_LOGIN_SERVER }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
            docker-compose pull
            docker-compose up -d
          EOF
